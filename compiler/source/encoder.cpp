#include "encoder.h"

#include <fstream>

#include "string_util.h"

void EncodeBuffer::push(const std::string& token)
{
	if (m_lines.empty())
	{
		m_lines.push_back(token);
	}
	else
	{
		m_lines[m_lines.size() - 1] += token;
	}
}

void EncodeBuffer::push_line(const std::string& line)
{
	m_lines.push_back(line);
}

bool Encoder::encode(TypeCollection& collection, const std::filesystem::path& file)
{
	std::string outHeaderFilename = StringUtil::replace(file.string(), ".h", "_generated.h");
	std::string outSourceFilename = StringUtil::replace(file.string(), ".h", "_generated.cpp");

	EncodeBuffer header_buffer;
	header_buffer.push_line("// Copyright (c) Vito Domenico Tagliente");
	header_buffer.push_line("// automatically generated by the compiler, do not modify");
	header_buffer.push_line("#pragma once");
	header_buffer.push_line("");
	header_buffer.push_line("#include <vdtreflect/runtime.h>");
	header_buffer.push_line("");

	EncodeBuffer source_buffer;
	source_buffer.push_line("// Copyright (c) Vito Domenico Tagliente");
	source_buffer.push_line("// automatically generated by the compiler, do not modify");
	source_buffer.push_line("#include \"", file.filename().string(), "\"");
	source_buffer.push_line("");

	// enums
	for (const auto& entity : collection.m_entities)
	{
		Type* const e = entity.get();
		if (TypeEnum* const eEnum = dynamic_cast<TypeEnum*>(e))
		{
			if (!encode(header_buffer, source_buffer, *eEnum))
			{
				return false;
			}
		}
	}

	// classes
	for (const auto& entity : collection.m_entities)
	{
		Type* const e = entity.get();
		if (TypeClass* const eClass = dynamic_cast<TypeClass*>(e))
		{
			if (!encode(header_buffer, source_buffer, *eClass))
			{
				return false;
			}
		}
	}

	// generate the header file
	{
		std::ofstream fstream(outHeaderFilename);
		if (!fstream.is_open())
		{
			return false;
		}

		for (const std::string& line : header_buffer.m_lines)
		{
			fstream << line << "\n";
		}
		fstream.close();
	}

	// generate the imp file
	{
		std::ofstream fstream(outSourceFilename);
		if (!fstream.is_open())
		{
			return false;
		}

		for (const std::string& line : source_buffer.m_lines)
		{
			fstream << line << "\n";
		}
		fstream.close();
	}

	return true;
}

bool Encoder::encode(EncodeBuffer& headerBuffer, EncodeBuffer& sourceBuffer, TypeClass& type)
{
	// header
	headerBuffer.push_line("struct ", type.name, "Type");
	headerBuffer.push_line("{");
	headerBuffer.push_line("    ", type.name, "Type();");
	headerBuffer.push_line("");
	headerBuffer.push_line("    static const meta_t& meta();");
	headerBuffer.push_line("    static const char* name();");
	headerBuffer.push_line("    static properties_t properties(const class ", type.name, "* const pointer);");
	headerBuffer.push_line("    static class ", type.name, "* const instantiate();");
	headerBuffer.push_line("    static std::size_t size();");
	headerBuffer.push_line("};");
	headerBuffer.push_line("extern ", type.name, "Type __", StringUtil::toLower(type.name), "_type;");
	headerBuffer.push_line("");

	// source
	sourceBuffer.push_line("const meta_t& ", type.name, "::getTypeMeta() const { return ", type.name, "Type::meta(); }");
	sourceBuffer.push_line("const char* ", type.name, "::getTypeName() const { return ", type.name, "Type::name(); }");
	sourceBuffer.push_line("const properties_t ", type.name, "::getTypeProperties() const { return ", type.name, "Type::properties(this); }");
	sourceBuffer.push_line("std::size_t ", type.name, "::getTypeSize() const { return ", type.name, "Type::size(); }");
	sourceBuffer.push_line("");
	sourceBuffer.push_line("", type.name, "Type::", type.name, "Type()");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    TypeFactoryRegister::load(", type.name, "Type::name(), []() -> const meta_t& { return ", type.name, "Type::meta(); }, []() -> IType* { return ", type.name, "Type::instantiate(); });");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("");
	sourceBuffer.push_line(type.name, "* const ", type.name, "Type::instantiate()");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    return new ", type.name, "();");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("");
	sourceBuffer.push_line("const meta_t& ", type.name, "Type::meta()");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    static meta_t s_meta{");
	for (const auto& [key, value] : type.meta)
	{
		sourceBuffer.push_line("        std::make_pair(\"", key, "\", \"", value, "\"),");
	}
	sourceBuffer.push_line("    };");
	sourceBuffer.push_line("    return s_meta;");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("");
	sourceBuffer.push_line("std::size_t ", type.name, "Type::size()");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    return sizeof(", type.name, ");");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("");
	sourceBuffer.push_line("const char* ", type.name, "Type::name() { return \"", type.name, "\"; }");
	sourceBuffer.push_line("properties_t ", type.name, "Type::properties(const ", type.name, "* const pointer)");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    member_address_t origin = reinterpret_cast<member_address_t>(pointer);");
	if (type.parent != "IType")
	{
		sourceBuffer.push_line("    properties_t properties = ", type.parent, "Type::properties(pointer);");
	}
	else
	{
		sourceBuffer.push_line("    properties_t properties;");
	}
	for (const Property& prop : type.properties)
	{
		sourceBuffer.push_line("    properties.insert(std::make_pair<std::string, Property>(\"", prop.name, "\", Property(\"", prop.name, "\", NativeType::NT_int, \"int\", sizeof(int), origin + offsetof(", type.name, ", ", prop.name, "), {");
		for (const auto& [key, value] : prop.meta)
		{
			sourceBuffer.push_line("        std::make_pair(\"", key, "\", \"", value, "\"),");
		}
		sourceBuffer.push_line("    })));");
	}
	sourceBuffer.push_line("    return properties;");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("");
	sourceBuffer.push_line("", type.name, "Type __", StringUtil::toLower(type.name), "_type;");
	sourceBuffer.push_line("");

	return true;
}

bool Encoder::encode(EncodeBuffer& headerBuffer, EncodeBuffer& sourceBuffer, TypeEnum& type)
{
	// header
	headerBuffer.push_line("template <>");
	headerBuffer.push_line("struct EnumType<enum class ", type.name, ">");
	headerBuffer.push_line("{");
	headerBuffer.push_line("    static const char* name();");
	headerBuffer.push_line("    static const std::map<const char*, int> values();");
	headerBuffer.push_line("};");
	headerBuffer.push_line("");

	// source
	sourceBuffer.push_line("const char* EnumType<", type.name, ">::name() { return \"", type.name, "\"; }");
	sourceBuffer.push_line("const std::map<const char*, int>  EnumType<", type.name, ">::values()");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    static std::map<const char*, int> s_values{");
	for (const std::string& option : type.options)
	{
		sourceBuffer.push_line("        { \"", option, "\", static_cast<int>(", type.name, "::", option, ") }, ");
	}
	sourceBuffer.push_line("    };");
	sourceBuffer.push_line("    return s_values;");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("");

	return true;
}
