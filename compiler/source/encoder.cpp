#include "encoder.h"

#include <fstream>
#include <iostream>

#include "string_util.h"

void EncodeBuffer::push(const std::string& token)
{
	if (m_lines.empty())
	{
		m_lines.push_back(token);
	}
	else
	{
		m_lines[m_lines.size() - 1] += token;
	}
}

void EncodeBuffer::push_line(const std::string& line)
{
	m_lines.push_back(line);
}

std::string EncodeBuffer::string() const
{
	std::string content;
	for (const std::string& line : m_lines)
	{
		content += line + "\n";
	}
	return content;
}

bool Encoder::encode(const SymbolList& symbolList, const TypeCollection& collection, const SymbolTable& symbolTable, const std::filesystem::path& path, const std::string& filename)
{
	static const auto read = [](const std::filesystem::path& filename) -> std::string
	{
		std::ostringstream buf;
		std::ifstream input(filename.c_str());
		buf << input.rdbuf();
		return buf.str();
	};

	std::filesystem::path outHeaderFilename = path / StringUtil::replace(filename, ".h", "_generated.h");
	std::filesystem::path outSourceFilename = path / StringUtil::replace(filename, ".h", "_generated.cpp");

	EncodeBuffer header_buffer;
	header_buffer.push_line("// Copyright (c) Vito Domenico Tagliente");
	header_buffer.push_line("// automatically generated by the compiler, do not modify");
	header_buffer.push_line("#pragma once");
	header_buffer.push_line("");
	header_buffer.push_line("#include <vdtreflect/runtime.h>");
	header_buffer.push_line("");

	EncodeBuffer source_buffer;
	source_buffer.push_line("// Copyright (c) Vito Domenico Tagliente");
	source_buffer.push_line("// automatically generated by the compiler, do not modify");
	source_buffer.push_line("#include \"", filename, "\"");
	source_buffer.push_line("");

	std::vector<TypeEnum*> enums;
	std::vector<TypeClass*> classes;

	for (const std::string& name : symbolList)
	{
		const auto& it = symbolTable.find(name);
		if (it == symbolTable.end())
		{
			std::cout << "Failed to find the symbol " << name << std::endl;
			return false;
		}

		SymbolType type = it->second;
		if (type == SymbolType::S_class)
		{
			TypeClass* const eClass = collection.findClass(name);
			if (eClass == nullptr)
			{
				std::cout << "Failed to find the class " << name << std::endl;
				return false;
			}
			classes.push_back(eClass);
		}
		else
		{
			TypeEnum* const eEnum = collection.findEnum(name);
			if (eEnum == nullptr)
			{
				std::cout << "Failed to find the enum " << name << std::endl;
				return false;
			}
			enums.push_back(eEnum);
		}
	}

	// enums
	for (TypeEnum* const eEnum : enums)
	{
		if (!encode(header_buffer, source_buffer, symbolTable, *eEnum))
		{
			std::cout << "Failed to encode the enum " << eEnum->name << std::endl;
			return false;
		}
	}

	// classes
	for (TypeClass* const eClass : classes)
	{
		if (!encode(header_buffer, source_buffer, symbolTable, collection, *eClass))
		{
			std::cout << "Failed to encode the class " << eClass->name << std::endl;
			return false;
		}
	}

	static const auto& generate = [](const EncodeBuffer& buffer, const std::string& filename) -> bool
	{
		std::string previousContent;
		std::string content = buffer.string();

		if (std::filesystem::exists(filename))
		{
			previousContent = read(filename);
		}

		if (previousContent != content)
		{
			std::ofstream fstream(filename);
			if (!fstream.is_open())
			{
				std::cout << "Failed to open the stream " << filename << std::endl;
				return false;
			}
			fstream << content;
			fstream.close();

			std::cout << filename << " generated" << std::endl;
		}
		return true;
	};

	// generate the header file only if it is changed or if it doesn't exist
	if (!generate(header_buffer, outHeaderFilename.string())) return false;
	// generate the source file only if it is changed or if it doesn't exist
	if (!generate(source_buffer, outSourceFilename.string())) return false;

	return true;
}

bool Encoder::encode(EncodeBuffer& headerBuffer, EncodeBuffer& sourceBuffer, const SymbolTable& symbolTable, const TypeCollection& collection, TypeClass& type)
{
	// header
	const std::string forward_keyword = type.isStruct ? "struct" : "class";
	headerBuffer.push_line("template <>");
	headerBuffer.push_line("struct reflect::Type<", forward_keyword, " ", type.name, "> : reflect::RegisteredInTypeFactory<", forward_keyword, " ", type.name, ">");
	headerBuffer.push_line("{");
	headerBuffer.push_line("    static const reflect::meta_t& meta();");
	headerBuffer.push_line("    static const char* const name();");
	headerBuffer.push_line("    static const reflect::properties_t& properties();");
	headerBuffer.push_line("");
	headerBuffer.push_line("    static bool registered() { return value; };");
	headerBuffer.push_line("};");
	headerBuffer.push_line("");

	// source
	sourceBuffer.push_line("const reflect::meta_t& reflect::Type<", type.name, ">::meta()");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    static reflect::meta_t s_meta {");
	for (const auto& [key, value] : type.meta)
	{
		sourceBuffer.push_line("        { \"", key, "\", \"", value, "\" },");
	}
	sourceBuffer.push_line("    };");
	sourceBuffer.push_line("    return s_meta;");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("const char* const reflect::Type<", type.name, ">::name() { return \"", type.name, "\"; }");
	sourceBuffer.push_line("");
	sourceBuffer.push_line("const reflect::properties_t& Type<", type.name, ">::properties()");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    static reflect::properties_t s_properties {");
	// look for parent classes
	bool has_parent = false;
	std::string parent_name = type.parent;
	while (parent_name != "IType")
	{
		has_parent = true;
		TypeClass* const parentClass = collection.findClass(parent_name);
		if (parentClass == nullptr)
		{
			std::cout << "Cannot find the parent class " << parent_name << std::endl;
			return false;
		}

		sourceBuffer.push_line("        // Parent class ", parent_name, " properties");
		for (const Property& property : parentClass->properties)
		{
			sourceBuffer.push_line(encode(symbolTable, type.name, "        ", property) + ",");
		}

		parent_name = parentClass->parent;
	}
	if (has_parent)
	{
		sourceBuffer.push_line("        // Properties");
	}
	for (const Property& property : type.properties)
	{
		sourceBuffer.push_line(encode(symbolTable, type.name, "        ", property) + ",");
	}
	sourceBuffer.push_line("    };");
	sourceBuffer.push_line("    return s_properties;");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("");
	sourceBuffer.push_line("const reflect::meta_t& ", type.name, "::type_meta() const { return reflect::Type<", type.name, ">::meta(); }");
	sourceBuffer.push_line("const char* const ", type.name, "::type_name() const { return reflect::Type<", type.name, ">::name(); }");
	sourceBuffer.push_line("const reflect::properties_t& ", type.name, "::type_properties() const { return reflect::Type<", type.name, ">::properties(); }");
	sourceBuffer.push_line("");

	return true;
}

bool Encoder::encode(EncodeBuffer& headerBuffer, EncodeBuffer& sourceBuffer, const SymbolTable& symbolTable, TypeEnum& type)
{
	// header
	headerBuffer.push_line("template <>");
	headerBuffer.push_line("struct reflect::Enum<enum class ", type.name, "> : reflect::RegisteredInEnumFactory<enum class ", type.name, ">");
	headerBuffer.push_line("{");
	headerBuffer.push_line("    static const char* const name();");
	headerBuffer.push_line("    static const reflect::enum_values_t& values();");
	headerBuffer.push_line("    ");
	headerBuffer.push_line("    static bool registered() { return value; };");
	headerBuffer.push_line("};");
	headerBuffer.push_line("");

	// source
	sourceBuffer.push_line("const char* const reflect::Enum<", type.name, ">::name() { return \"", type.name, "\"; }");
	sourceBuffer.push_line("const reflect::enum_values_t& reflect::Enum<", type.name, ">::values()");
	sourceBuffer.push_line("{");
	sourceBuffer.push_line("    static reflect::enum_values_t s_values{");
	for (const std::string& option : type.options)
	{
		sourceBuffer.push_line("        { \"", option, "\", static_cast<int>(", type.name, "::", option, ") }, ");
	}
	sourceBuffer.push_line("    };");
	sourceBuffer.push_line("    return s_values;");
	sourceBuffer.push_line("}");
	sourceBuffer.push_line("");

	return true;
}

std::string Encoder::encode(const SymbolTable& symbolTable, const std::string& name, const std::string& offset, const Property& property)
{
	std::string content = (offset + "{ \"" + property.name + "\", reflect::Property{ offsetof(" + name + ", " + property.name + "), reflect::meta_t {");
	bool first = true;
	for (const auto& [key, value] : property.meta)
	{
		content += (std::string(first ? "" : ", ") + ("{\"" + key + "\", \"" + value + "\"}"));
		first = false;
	}
	content += (" }, \"" + property.name + "\", " + encode(symbolTable, property.type, offset) + " } }");
	return content;
}

std::string Encoder::encode(const SymbolTable& symbolTable, const std::string& token, const std::string& offset)
{
	const std::string type = token;
	const std::string decoratorEnum = encodeToDecoratorTypeEnum(symbolTable, type);
	const std::string typeEnum = encodeToTypeEnum(symbolTable, type);
	std::vector<std::string> typenames; 
	std::string children = " ";

	std::string off = offset + "    ";
	if (typeEnum == "reflect::NativeType::Type::T_template")
	{
		children = "";
		typenames = extractTypenames(type);
		for (const std::string& tname : typenames)
		{
			children += ("\n" + off + encode(symbolTable, tname, offset + "    ") + ",");
		}
		children += ("\n" + offset);
	}
	
	return ("NativeType{ \"" + type + "\", { " + children + "}, " + decoratorEnum + ", sizeof(" + type + "), " + typeEnum + " }");
}

std::string Encoder::encodeToTypeEnum(const SymbolTable& symbolTable, const std::string& t)
{
	std::string type = StringUtil::replace(t, "std::", "");
	if (type.empty()) return "reflect::NativeType::Type::T_unknown";

	while (!type.empty() && (type[type.length() - 1] == '*' || type[type.length() - 1] == '&' || type[type.length() - 1] == ' '))
	{
		type.pop_back();
	}

	if (type == "bool") return "reflect::NativeType::Type::T_bool";
	if (type == "char") return "reflect::NativeType::Type::T_char";
	if (type == "double") return "reflect::NativeType::Type::T_double";
	if (type == "float") return "reflect::NativeType::Type::T_float";
	if (type == "int") return "reflect::NativeType::Type::T_int";
	if (type == "void") return "reflect::NativeType::Type::T_void";
	if (type == "string") return "reflect::NativeType::Type::T_string";
	if (type.find("<") != std::string::npos) return "reflect::NativeType::Type::T_template";

	const auto& it = symbolTable.find(type);
	if (it != symbolTable.end())
	{
		switch (it->second)
		{
		case SymbolType::S_class: return "reflect::NativeType::Type::T_type";
		case SymbolType::S_enum: return "reflect::NativeType::Type::T_enum";
		default: return "reflect::Property::Type::T_unknown";
		}
	}

	return "reflect::NativeType::Type::T_unknown";
}

std::string Encoder::encodeToDecoratorTypeEnum(const SymbolTable& symbolTable, const std::string& t)
{
	if (StringUtil::endsWith(t, "*")) return "reflect::NativeType::DecoratorType::D_pointer";
	if (StringUtil::endsWith(t, "&")) return "reflect::NativeType::DecoratorType::D_reference";
	return "reflect::NativeType::DecoratorType::D_raw";
}

std::vector<std::string> Encoder::extractTypenames(const std::string& token)
{
	std::vector<std::string> typenames;
	const size_t startIndex = token.find('<');
	if (startIndex == std::string::npos) return typenames;

	if (token.back() != '>') return typenames;

	std::string content = token.substr(startIndex + 1, token.length());
	content.pop_back();

	for (std::string t : StringUtil::split(content, ','))
	{
		typenames.push_back(StringUtil::trim(t));
	}
	return typenames;
}

std::string Encoder::sanitizeTemplate(const std::string& token)
{
	const size_t startIndex = token.find('<');
	if (startIndex == std::string::npos) return token;

	if (token.back() != '>') return token;

	std::string content = token.substr(startIndex + 1, token.length());
	content.pop_back();

	return content;
}
