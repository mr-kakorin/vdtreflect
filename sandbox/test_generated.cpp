// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "test.h"

const char* const Enum<TestEnum>::name() { return "TestEnum"; }
const enum_values_t& Enum<TestEnum>::values()
{
    static enum_values_t s_values{
        { "A", static_cast<int>(TestEnum::A) }, 
        { "B", static_cast<int>(TestEnum::B) }, 
    };
    return s_values;
}

const char* const Enum<ApplicationMode>::name() { return "ApplicationMode"; }
const enum_values_t& Enum<ApplicationMode>::values()
{
    static enum_values_t s_values{
        { "Editor", static_cast<int>(ApplicationMode::Editor) }, 
        { "Server", static_cast<int>(ApplicationMode::Server) }, 
        { "Standalone", static_cast<int>(ApplicationMode::Standalone) }, 
    };
    return s_values;
}

const type_meta_t& Type<Foo>::meta()
{
    static type_meta_t s_meta {
        { "Category", "MyClass" },
        { "Serializable", "true" },
    };
    return s_meta;
}
const char* const Type<Foo>::name() { return "Foo"; }

const type_properties_t& Type<Foo>::properties()
{
    static type_properties_t s_properties {
        { "a", Property{ offsetof(Foo, a), type_meta_t {{"JsonExport", "true"} }, "a", NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int } } },
        { "b", Property{ offsetof(Foo, b), type_meta_t { }, "b", NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int } } },
    };
    return s_properties;
}

const type_meta_t& Foo::type_meta() const { return Type<Foo>::meta(); }
const char* const Foo::type_name() const { return Type<Foo>::name(); }
const type_properties_t& Foo::type_properties() const { return Type<Foo>::properties(); }

const type_meta_t& Type<Poo>::meta()
{
    static type_meta_t s_meta {
    };
    return s_meta;
}
const char* const Type<Poo>::name() { return "Poo"; }

const type_properties_t& Type<Poo>::properties()
{
    static type_properties_t s_properties {
        // Parent class Foo properties
        { "a", Property{ offsetof(Poo, a), type_meta_t {{"JsonExport", "true"} }, "a", NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int } } },
        { "b", Property{ offsetof(Poo, b), type_meta_t { }, "b", NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int } } },
        // Properties
        { "c", Property{ offsetof(Poo, c), type_meta_t { }, "c", NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int } } },
        { "numbers", Property{ offsetof(Poo, numbers), type_meta_t { }, "numbers", NativeType{ "std::vector<int>", { 
            NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int },
        }, NativeType::DecoratorType::D_raw, sizeof(std::vector<int>), NativeType::Type::T_template } } },
        { "dictionary", Property{ offsetof(Poo, dictionary), type_meta_t { }, "dictionary", NativeType{ "std::map<std::string, int>", { 
            NativeType{ "std::string", {  }, NativeType::DecoratorType::D_raw, sizeof(std::string), NativeType::Type::T_string },
            NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int },
        }, NativeType::DecoratorType::D_raw, sizeof(std::map<std::string, int>), NativeType::Type::T_template } } },
        { "tuple", Property{ offsetof(Poo, tuple), type_meta_t { }, "tuple", NativeType{ "std::tuple<int, float, bool, double>", { 
            NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int },
            NativeType{ "float", {  }, NativeType::DecoratorType::D_raw, sizeof(float), NativeType::Type::T_float },
            NativeType{ "bool", {  }, NativeType::DecoratorType::D_raw, sizeof(bool), NativeType::Type::T_bool },
            NativeType{ "double", {  }, NativeType::DecoratorType::D_raw, sizeof(double), NativeType::Type::T_double },
        }, NativeType::DecoratorType::D_raw, sizeof(std::tuple<int, float, bool, double>), NativeType::Type::T_template } } },
        { "power_dictionary", Property{ offsetof(Poo, power_dictionary), type_meta_t { }, "power_dictionary", NativeType{ "std::map<std::string, std::vector<int>>", { 
            NativeType{ "std::string", {  }, NativeType::DecoratorType::D_raw, sizeof(std::string), NativeType::Type::T_string },
            NativeType{ "std::vector<int>", { 
                NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int },
            }, NativeType::DecoratorType::D_raw, sizeof(std::vector<int>), NativeType::Type::T_template },
        }, NativeType::DecoratorType::D_raw, sizeof(std::map<std::string, std::vector<int>>), NativeType::Type::T_template } } },
        { "e", Property{ offsetof(Poo, e), type_meta_t { }, "e", NativeType{ "TestEnum", {  }, NativeType::DecoratorType::D_raw, sizeof(TestEnum), NativeType::Type::T_enum } } },
        { "type", Property{ offsetof(Poo, type), type_meta_t { }, "type", NativeType{ "Foo", {  }, NativeType::DecoratorType::D_raw, sizeof(Foo), NativeType::Type::T_type } } },
    };
    return s_properties;
}

const type_meta_t& Poo::type_meta() const { return Type<Poo>::meta(); }
const char* const Poo::type_name() const { return Type<Poo>::name(); }
const type_properties_t& Poo::type_properties() const { return Type<Poo>::properties(); }

const type_meta_t& Type<Too>::meta()
{
    static type_meta_t s_meta {
    };
    return s_meta;
}
const char* const Type<Too>::name() { return "Too"; }

const type_properties_t& Type<Too>::properties()
{
    static type_properties_t s_properties {
        // Parent class Foo properties
        { "a", Property{ offsetof(Too, a), type_meta_t {{"JsonExport", "true"} }, "a", NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int } } },
        { "b", Property{ offsetof(Too, b), type_meta_t { }, "b", NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int } } },
        // Properties
        { "c", Property{ offsetof(Too, c), type_meta_t { }, "c", NativeType{ "int", {  }, NativeType::DecoratorType::D_raw, sizeof(int), NativeType::Type::T_int } } },
    };
    return s_properties;
}

const type_meta_t& Too::type_meta() const { return Type<Too>::meta(); }
const char* const Too::type_name() const { return Type<Too>::name(); }
const type_properties_t& Too::type_properties() const { return Type<Too>::properties(); }

