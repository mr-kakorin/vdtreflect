// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtreflect/runtime.h>

template <>
struct EnumType<enum class TestEnum>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct TestEnumEnum : RegisteredInEnumFactory<enum class TestEnum>
{
    static bool registered() { return value; };
};

template <>
struct EnumType<enum class UserRole>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct UserRoleEnum : RegisteredInEnumFactory<enum class UserRole>
{
    static bool registered() { return value; };
};

template <>
struct EnumType<enum class ApplicationMode>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct ApplicationModeEnum : RegisteredInEnumFactory<enum class ApplicationMode>
{
    static bool registered() { return value; };
};

struct FooType : RegisteredInTypeFactory<FooType>
{
    FooType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct PooType : RegisteredInTypeFactory<PooType>
{
    PooType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct UserType : RegisteredInTypeFactory<UserType>
{
    UserType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

