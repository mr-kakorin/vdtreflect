// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtreflect/runtime.h>

template <>
struct Enum<enum class TestEnum> : RegisteredInEnumFactory<enum class TestEnum>
{
    static const char* const name();
    static const enum_values_t& values();
    
    static bool registered() { return value; };
};

template <>
struct Enum<enum class ApplicationMode> : RegisteredInEnumFactory<enum class ApplicationMode>
{
    static const char* const name();
    static const enum_values_t& values();
    
    static bool registered() { return value; };
};

template <>
struct Type<class Foo> : RegisteredInTypeFactory<class Foo>
{
    static const type_meta_t& meta();
    static const char* const name();
    static const type_properties_t& properties();

    static bool registered() { return value; };
};

template <>
struct Type<class Poo> : RegisteredInTypeFactory<class Poo>
{
    static const type_meta_t& meta();
    static const char* const name();
    static const type_properties_t& properties();

    static bool registered() { return value; };
};

template <>
struct Type<struct Too> : RegisteredInTypeFactory<struct Too>
{
    static const type_meta_t& meta();
    static const char* const name();
    static const type_properties_t& properties();

    static bool registered() { return value; };
};

